generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  name             String?
  image            String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  // Relations
  games            Game[]
  openingStats     UserOpeningStats[]
  
  @@map("users")
}

model Game {
  id                   String   @id @default(cuid())
  date                 DateTime
  opponent             String
  result               String   // "win", "loss", "draw"
  opening              String
  ecoCode              String?  // ECO code (A00-E99) - NULLABLE!
  timeControl          String?
  notes                String?
  pgn                  String?  // Chess moves for Stockfish analysis
  source               String?  // "manual", "lichess", "chess.com"
  externalId           String?  // External service game ID
  userId               String
  
  // ðŸ†• Elite game indicators
  isElite              Boolean  @default(false)  // Elite tournament game
  isWorldChampionship  Boolean  @default(false)  // World Championship game
  avgRating            Int?     // Average rating of players
  tournament           String?  // Tournament name if applicable
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  openingRef           Opening? @relation(fields: [ecoCode], references: [ecoCode], onDelete: SetNull)
  
  @@map("games")
}

// ECO Opening Model
model Opening {
  id            String   @id @default(cuid())
  ecoCode       String   @unique
  name          String
  family        String
  variation     String?
  subvariation  String?
  moves         String
  fen           String?
  
  // Statistical data
  popularity    Int      @default(0)
  whiteWins     Int      @default(0)
  blackWins     Int      @default(0)
  draws         Int      @default(0)
  
  // Professional analysis fields
  avgElo        Int      @default(1500)     // Average player rating
  masterGames   Int      @default(0)        // Games by 2400+ players
  recentGames   Int      @default(0)        // Games in last 30 days
  complexity    Float    @default(5.0)      // Complexity score 1-10
  theoryDepth   Int      @default(1)        // How deep theory goes
  
  // ðŸ†• Elite tournament stats
  eliteGames    Int      @default(0)        // Games from elite tournaments
  wcGames       Int      @default(0)        // World Championship games
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt        // For "recent" sorting
  
  // Relations
  games         Game[]   @relation
  userStats     UserOpeningStats[]
}

// User statistics per opening
model UserOpeningStats {
  id          String    @id @default(cuid())
  userId      String
  ecoCode     String
  gamesPlayed Int       @default(0)
  wins        Int       @default(0)
  losses      Int       @default(0)
  draws       Int       @default(0)
  winRate     Float     @default(0.0)
  lastPlayed  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  opening     Opening   @relation(fields: [ecoCode], references: [ecoCode], onDelete: Cascade)
  
  @@unique([userId, ecoCode])
  @@map("user_opening_stats")
}